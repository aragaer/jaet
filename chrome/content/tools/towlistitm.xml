<?xml version="1.0"?>
<bindings 
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
    <binding id="towlistitem" extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
        <content>
            <xul:hbox anonid="wrap" flex="1">
            <xul:vbox flex="1">
                <xul:hbox anonid="label">
                    <xul:label xbl:inherits="value=name" class="header" />
                </xul:hbox>
                <xul:hbox style="border: none; overflow-x: auto; overflow-y: hidden">
                    <xul:hbox anonid="pos_fit"/>
                </xul:hbox>
            </xul:vbox>
            </xul:hbox>
        </content>
        <implementation>
            <constructor><![CDATA[
                this.fit = document.getAnonymousElementByAttribute(this,"anonid","pos_fit");
            ]]></constructor>
            <property name="tower" onget="return this._tower">
                <setter><![CDATA[
                    this._tower = val.QueryInterface(Ci.nsIEveControlTower);
                    this._tt = val.type.QueryInterface(Ci.nsIEveControlTowerType);
                    var ttid = this._tt.id;
                    var labelbox = document.getAnonymousElementByAttribute(this,"anonid","label");
                    if (!this.img) {
                        var wrap = document.getAnonymousElementByAttribute(this,"anonid","wrap");
                        this.img = document.createElement('image');
                        this.img.setAttribute('width', 128);
                        wrap.insertBefore(this.img, wrap.firstChild);
                    }
                    this.img.setAttribute('src', "chrome://jaet/content/images/"+ttid+".png");
                    if (!this.tlabel) {
                        this.tlabel = document.createElement("label");
                        labelbox.appendChild(this.tlabel);
                    }
                    this.tlabel.setAttribute('value',"("+this._tt.name+")");
                    if (!this.conslabel) {
                        var sp = document.createElement('spacer');
                        sp.setAttribute('flex', "100");
                        labelbox.appendChild(sp);
                        this.conslabel = document.createElement('tow_stats_box');
                        labelbox.appendChild(this.conslabel);
                    }

                    this.conslabel.grid = this._tower.powerUsage;
                    this.conslabel.cpu = this._tower.CPUUsage;
                    this.conslabel.max_grid = this._tt.powerGrid;
                    this.conslabel.max_cpu = this._tt.CPU;

                    this.conslabel.refresh();

                    this.setAttribute("name", this._tower.name);
                    this.setAttribute("value", this._tower.id);
                    return val;
                ]]></setter>
            </property>
            <property name="id" onget="return this.value" />
            <property name="structures">
                <setter><![CDATA[
                    while (this.fit.firstChild)
                        this.fit.removeChild(this.fit.firstChild);
                    if (val)
                        val.forEach(this.addStructure);
                    return val;
                ]]></setter>
                <getter><![CDATA[
                    return this.fit.childNodes.map(function (a) { return a.item });
                ]]></getter>
            </property>
            <method name="addStructure">
                <parameter name="struct" />
                <body><![CDATA[
                    var itm = document.createElement('image');
                    itm.setAttribute('name', struct.type.name);
                    itm.setAttribute('height', 100);
                    itm.setAttribute('width', 100);
                    this.fit.appendChild(itm);
                    itm.item = struct;
                ]]></body>
            </method>
            <method name="add_struct">
                <parameter name="struct" />
                <body><![CDATA[
                    this.fit.appendChild(struct);
                    if (this.conslabel) {
                        this.conslabel.grid += struct.grid;
                        this.conslabel.cpu  += struct.cpu;
                        this.conslabel.refresh();
                    } 
                ]]></body>
            </method>
            <method name="del_struct">
                <parameter name="struct" />
                <body><![CDATA[
                    this.fit.removeChild(struct);
                    if (this.conslabel) {
                        this.conslabel.grid -= struct.grid;
                        this.conslabel.cpu  -= struct.cpu;
                        this.conslabel.refresh();
                    } 
                ]]></body>
            </method>
        </implementation>
        <handlers>
            <handler event="dragenter"><![CDATA[
                event.preventDefault();
                event.dataTransfer.dropEffect = "move";
                this.style.background = "#c0c0ff";
            ]]></handler>
            <handler event="dragover"><![CDATA[
                event.preventDefault();
                event.dataTransfer.dropEffect = "move";
            ]]></handler>
            <handler event="dragleave"><![CDATA[
                this.style.background = "none";
            ]]></handler>
            <handler event="dragdrop"><![CDATA[
                var item = event.dataTransfer.mozGetDataAt('application/x-moz-node', 0);
                item.moveTo(this);
            ]]></handler>
        </handlers>
    </binding>
    <binding id="struct" extends="xul:image">
        <implementation>
            <property name="item" onget="return this._item">
                <setter><![CDATA[
                    this._item = val;
                    this.setAttribute('src', "chrome://jaet/content/images/"+val.type.id+".png");
                    this.setAttribute('tooltiptext', val.type.name);
                    var me = this;
                    EveApi.getGridCPUReqs(this._item.type.id, function (res) {
                        me.grid = res.grid;
                        me.cpu = res.cpu;
                    });
                    return val;
                ]]></setter>
            </property>
            <property name="width" value="100" />
            <property name="height" value="100" />
            <property name="draggable" value="true" />
            <method name="moveTo">
                <parameter name="to" />
                <body><![CDATA[
                    EveApi.setStarbase(this._item, to.tower ? to.tower.id : 0);
                    var pos = document.getBindingParent(this);
                    if (pos)
                        pos.del_struct(this);
                    to.add_struct(this);
                ]]></body>
            </method>
        </implementation>
        <handlers>
            <handler event="dragstart"><![CDATA[
                event.dataTransfer.effectAllowed = "move";
                event.dataTransfer.setDragImage(this, 0, 0);
                event.dataTransfer.mozSetDataAt('application/x-moz-node', this, 0);
                event.dataTransfer.mozSetDataAt('application/x-moz-node', null, 1);
                event.dataTransfer.setData("text/plain", this._item.type.name);
            ]]></handler>
        </handlers>
    </binding>
    <binding id="fit_stats" extends="xul:hbox">
        <content>
            <xul:label anonid="grid" />
            <xul:label anonid="cpu" />
        </content>
        <implementation>
            <constructor><![CDATA[
                this._grid = document.getAnonymousElementByAttribute(this,'anonid','grid');
                this._cpu = document.getAnonymousElementByAttribute(this,'anonid','cpu');
            ]]></constructor>
            <property name="grid" onset="this._g=+val;return val" onget="return +this._g" />
            <property name="max_grid" onset="this._mg=+val;return val" onget="return +this._mg" />
            <property name="cpu" onset="this._c=+val;return val" onget="return +this._c" />
            <property name="max_cpu" onset="this._mc=+val;return val" onget="return +this._mc" />
            <method name="refresh">
                <body><![CDATA[
                    this._grid.value=this._g+"/"+this._mg+" mw";
                    this._cpu.value=this._c+"/"+this._mc+" tf";
                ]]></body>
            </method>
        </implementation>
    </binding>
</bindings>

